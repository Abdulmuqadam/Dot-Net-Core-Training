Scaffolding:-
	is a technique used to generate code at desgin time to support a number of common application scenarios when working with entity framework core.
ORM:
	 a programming technique for converting data between a relational database and the heap of an object-oriented programming language.

Attributes in Controller:
	The Microsoft.AspNetCore.Mvc namespace provides attributes that can be used to configure the behavior of web API controllers and action methods. 
The following example uses attributes to specify the supported HTTP action verb and any known HTTP status codes that could be returned:

Example:

[HttpPost]
[ProducesResponseType(StatusCodes.Status201Created)]
[ProducesResponseType(StatusCodes.Status400BadRequest)]
public ActionResult<Pet> Create(Pet pet)
{
    pet.Id = _petsInMemoryStore.Any() ? 
             _petsInMemoryStore.Max(p => p.Id) + 1 : 1;
    _petsInMemoryStore.Add(pet);

    return CreatedAtAction(nameof(GetById), new { id = pet.Id }, pet);
}

Controller in C#:-
	Controller is defined as the group of actions and method. Web api controller should derive fromm ControllerBase rather from Controller, Controller Derived 
From the Controller supports for views, so it's for handling Web Pages rather then Web Api requests. if the same controller must support views and web Apis, derive 
from Controller.Job of a Controller is to receive a request that match a paricular path and different operation are defined that are able to inspect the request carry 
out any necessary business logic these operations are called action methods

Example:

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace ControllersAndActions.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RecipesController : ControllerBase
    {
        [HttpGet]
        public string[] GetDishes()
        {
            string[] dishes = { "Biryani", "Karahi", "Palao" };
            return dishes;
        }
    }
}

[ApiController]
	The [ApiController] attribute can be applied to a controller class to enable the following opinionated, API-specific behaviors:
1.Attribute routing requirement
2.Automatic HTTP 400 responses
3.Binding source parameter inference
4.Multipart/form-data request inference
5.Problem details for error status codes

Route:-
	In the given Example the Route Attribute specifying that our controller is responsible for the request landed on the path api/{controller name} and HttpGet 
attributes tells that this action method is httpget request method.

Route Parameters:-
	Route parameters are the parameters that are given to the route on the order to do any action. 
For example
routes.MapHttpRoute(
    name: "API Default",
    routeTemplate: "api/{controller}/{id}",
    defaults: new { id = RouteParameter.Optional }
);
In the given example the id in the route is optional if the route have the id then on the controller the getbyid, put and delete methods can be perform.

Http Verbs:-

There Few types of Http Verbs some of them are:
1. Get: Get The Data From the Server.
2. Post: Create a resource in the server.
3. Put: Update the Resource in the server.
4. Patch: Partial Update of the resource.
5. Delete: Delete the resource from the server.

Why not to use one request for different puropse like get to update?

Here are a few key reasons:

1. Idempotence: a property of some operations such that no matter how many times you execute them, you achieve the same result.
2. Caching: GET requests are often cached by web browsers and intermediaries like proxy servers. Caching is based on the assumption that GET requests do not modify 
data
3. Security: GET requests typically include data in the URL, which can be visible in browser history, server logs, and potentially other places.
4. HTTP Semantics: The HTTP/1.1 specification defines the semantics of different HTTP methods, and GET is explicitly defined as a safe method for retrieving resources.

Body Objects:
	 "body objects" refer to the data that is sent in the HTTP request body when a client makes a request to the API. This data is typically in JSON or XML format,
but it can also be in other formats like form data or plain text.

Here's a brief explanation of how body objects are used in a .NET Core Web API

1. HTTP Requests: When a client (e.g., a web browser or another application) sends a request to a Web API endpoint, the request can include data in the request body. 
This data can be used to provide information or input to the API.
2. Deserialization: In a .NET Core Web API, the incoming request body data is deserialized into .NET objects. This process converts the JSON or XML data into instances
of C# classes or objects that can be easily processed and manipulated by the API code.
3. Model Binding: .NET Core Web API uses model binding to map the incoming request data to the parameters of a controller action method. This allows you to work with 
the data in a strongly-typed manner.
4. Processing: Once the data is deserialized and bound to the appropriate model or parameter, you can use it in your API logic. You can perform operations on the data,
validate it, and use it to generate responses.
5.HTTP Responses: After processing the request, the API typically returns an HTTP response to the client. This response may also include data in the response body, 
which can be serialized from .NET objects to the desired format (e.g., JSON or XML) and sent back to the client.

Query Parameters:
	In .Net Core Webapi, Query Parameters are used to pass data to the server- side from the url.These parameters are typically included after the question mark 
(?) in the URL and separated by ampersands (&). Here's how you can work with query parameters in a .NET Core Web API

For Example:

[HttpGet("items")]
public IActionResult GetItems([FromQuery] string keyword, [FromQuery] int page, [FromQuery] int pageSize)
{
    // Use the query parameters to filter and paginate data
    var filteredItems = items.Where(item => item.Name.Contains(keyword, StringComparison.OrdinalIgnoreCase))
                             .Skip((page - 1) * pageSize)
                             .Take(pageSize)
                             .ToList();

    // Return the filtered and paginated result
    return Ok(filteredItems);
}

When the user makes the request the url will be like this GET /api/items?keyword=searchterm&page=1&pageSize=10
This URL includes the keyword, page, and pageSize query parameters. When the request is made, ASP.NET Core will automatically bind these values to the corresponding
method parameters.

Custom Routing Paths:

In a .NET Core Web API, you can customize the routing paths for your controller methods using the [Route] attribute.

For Example:

[Route("api/[controller]")]
[ApiController]
public class ItemsController : ControllerBase
{
[HttpGet("all")]
public IActionResult GetAllItems()
{
    // Your code to get all items
}

[HttpGet("{id}")]
public IActionResult GetItemById(int id)
{
    // Your code to get an item by ID
}

[HttpPost("create")]
public IActionResult CreateItem([FromBody] Item newItem)
{
    // Your code to create a new item
}

[HttpPut("{id}")]
public IActionResult UpdateItem(int id, [FromBody] Item updatedItem)
{
    // Your code to update an item
}

[HttpDelete("{id}")]
public IActionResult DeleteItem(int id)
{
    // Your code to delete an item
}
}

In the following example: to retrieve all items, you can make a GET request to:
http://localhost:5000/api/items/all
To create a new item, you can make a POST request to:
http://localhost:5000/api/items/create

