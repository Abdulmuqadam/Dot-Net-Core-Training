Action Filters:
	action filters are a concept commonly used in ASP.NET MVC and ASP.NET Core to add behavior to controller actions. Action filters allow you to execute code 
before and after an action method is called. They are primarily used for tasks such as authentication, logging, caching, and validation.

There are several built-in action filters in ASP.NET, and you can also create custom action filters to suit your application's specific needs. Here are some commonly 
used action filters:

Authorization Filter: 
	Authorization filters are used to check whether a user is authorized to access a particular action method or resource. They are commonly used for implementing 
role-based or policy-based access control.

Authentication Filter: 
	Authentication filters are responsible for verifying the identity of a user. They are often used for tasks like checking user credentials, token validation, 
and setting up the user's identity.

Action Filter: 
	Action filters are the most generic type of filter. They allow you to run code before and after an action method executes. You can use them for tasks like 
logging, caching, or modifying the action's result.

Result Filter: 
	Result filters are executed before and after the action result is executed. They are useful for modifying the response generated by an action method.

Exception Filter: 
	Exception filters are executed when an unhandled exception occurs during the execution of an action method. They are used to handle and log exceptions 
gracefully.

To use an action filter in your ASP.NET application, you typically create a custom filter class that implements one of the filter interfaces provided by the framework 
(e.g., IAuthorizationFilter, IActionFilter, etc.). Then, you can apply the filter to a controller action method by decorating the method with an attribute that 
corresponds to the filter type.

Here's an example of applying an action filter in C#:

[Authorize] // Applying an authorization filter
public IActionResult SecureAction()
{
    // Your secure action code here
    return View();
}

In this example, the [Authorize] attribute is an authorization filter that restricts access to the SecureAction method to only authenticated users.

Action filters provide a powerful way to encapsulate cross-cutting concerns in your application and keep your code organized and maintainable. They help you add 
functionality to your controller actions without cluttering your action methods with unrelated code.